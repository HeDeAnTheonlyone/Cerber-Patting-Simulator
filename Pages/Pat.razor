@page "/"
@implements IAsyncDisposable

<PageTitle>Cerbert Patting Simulator</PageTitle>

<head>
    <link rel="stylesheet" href="css/pat.css">
</head>

<h1 style="margin-top: 5vh;">Pat Cerber</h1>
@if (isMute) { <p>Click once to unmute</p> }

<div class="mouse-tracker" @onmousemove="OnMouseMove"></div>

<div @onmousemove="OnMouseMove" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave" @onclick="OnClick">
    <audio @ref="audioRef">
        <source src="assets/audio/mygosh.mp3" type="audio/mpeg">
    </audio>

    @if ((IsMoving && IsInPatArea) || !isPatable)
    {
        <img class="cerber" draggable="false" src="assets/image/dawg-smile.png" alt="Cerber Smile" />
        <img class="patpat" draggable="false" src="assets/image/patpat.webp" alt="Patpat" />
    }
    else
    {
        <img class=cerber draggable="false" src="assets/image/dawg.png" alt="Cerber" />
    }
</div>



@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private bool isMoving = false;
    private bool IsMoving
    {
        get => isMoving;
        set
        {
            isMoving = value;
            IsPating = IsMoving && IsInPatArea;
        }
    }

    private bool isInPatArea = false;
    private bool IsInPatArea
    {
        get => isInPatArea;
        set
        {
            isInPatArea = value;
            IsPating = IsInPatArea && IsMoving;
        }
    }

    private bool isPating = false;
    private bool IsPating
    {
        get => isPating;
        set
        {
            isPating = value;
            ManageAudio(value);
        }
    }

    private bool isPatable = true;
    private bool isMute = true;
    private Timer timer;
    private DateTime lastMouseMove;
    private TimeSpan idleThreshold = TimeSpan.FromSeconds(0.2);
    private ElementReference audioRef;



    protected override void OnInitialized()
    {
        timer = new Timer(CheckIdleStatus, null, TimeSpan.FromSeconds(0), idleThreshold);
    }


    private async void ManageAudio(bool value)
    {
        if (value) await PlayAudio();
        else await StopAudio();
    }


    [JSInvokable] public void UnBlockPatting()
    {
        isPatable = true;
        StateHasChanged();
    }


    private async Task PlayAudio()
    {
        if (!isPatable) return;

        var dotNetObjRef = DotNetObjectReference.Create(this);
        if (!isMute)
        {
            await JSRuntime.InvokeVoidAsync("audioPlayer.play", audioRef, dotNetObjRef);
            isPatable = false;
        }
    }


    private async Task StopAudio()
    {
        if (!isMute) await JSRuntime.InvokeVoidAsync("audioPlayer.setLoop", false);
    }


    private void CheckIdleStatus(object? state)
    {
        if (DateTime.Now.Subtract(lastMouseMove) >= idleThreshold) IsMoving = false;

        InvokeAsync(StateHasChanged);
    }


    private void OnMouseMove(MouseEventArgs e)
    {
        IsMoving = true;
        lastMouseMove = DateTime.Now;
    }


    private void OnMouseEnter() => IsInPatArea = true;
    private void OnMouseLeave() => IsInPatArea = false;
    private void OnClick() => isMute = false;


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (timer != null) await timer.DisposeAsync();
    }
}