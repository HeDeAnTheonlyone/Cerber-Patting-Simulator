@page "/"
@implements IAsyncDisposable

<PageTitle>Cerbert Patting Simulator</PageTitle>

<head>
    <link rel="stylesheet" href="css/pat.css">
</head>

<h1 style="margin-top: 5vh;">Pat Cerber</h1>
@if (isMute) { <p>Click once to unmute</p> }

<div @onmousemove="OnMouseMove" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave" @onclick="OnClick">
    <audio @ref="audioRef">
        <source src="assets/audio/mygosh.mp3" type="audio/mpeg">
    </audio>

    <img class="cerber" draggable="false" src="@((IsMoving && IsInPatArea) || !isPatable ? "assets/image/dawg-smile.png" : "assets/image/dawg.png")" alt="Cerber" />

    @if ((IsMoving && IsInPatArea) || !isPatable)
    {
        <img class="patpat" draggable="false" src="assets/image/patpat.webp" alt="Patpat" />
    }
</div>



@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    private DotNetObjectReference<Pat> DotNetObjRef { get; set; }

    private bool isMoving = false;
    private bool IsMoving
    {
        get => isMoving;
        set
        {
            isMoving = value;
            IsPatting = IsMoving && IsInPatArea;
        }
    }

    private bool isInPatArea = false;
    private bool IsInPatArea
    {
        get => isInPatArea;
        set
        {
            isInPatArea = value;
            IsPatting = IsInPatArea && IsMoving;
        }
    }
    private bool isPatting = false;
    private bool IsPatting
    {
        get => isPatting;
        set
        {
            if (isPatting == value) return;
            isPatting = value;
            ManageAudio(value);
        }
    }

    private int Counter { get; set; }
    private bool isPatable = true;
    private bool isMute = true;
    private Timer timer;
    private DateTime lastMouseMove;
    private TimeSpan idleThreshold = TimeSpan.FromSeconds(0.2);
    private ElementReference audioRef;



    protected override void OnInitialized()
    {
        DotNetObjRef = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("setDotNetObjRef", DotNetObjRef);
        timer = new Timer(CheckIdleStatus, null, TimeSpan.FromSeconds(0), idleThreshold);
    }

    private async void ManageAudio(bool value)
    {
        if (value) await PlayAudio();
        else await StopAudio();
    }

    [JSInvokable] public void UnblockPatting()
    {
        isPatable = true;
        StateHasChanged();
    }

    private async Task PlayAudio()
    {
        if (!isPatable) return;

        if (!isMute)
        {
            await JSRuntime.InvokeVoidAsync("audioPlayer.play", audioRef);
            isPatable = false;
        }
    }

    private async Task StopAudio()
    {
        if (!isMute) await JSRuntime.InvokeVoidAsync("audioPlayer.setLoop", false);
    }

    private void CheckIdleStatus(object? state)
    {
        if (DateTime.Now.Subtract(lastMouseMove) >= idleThreshold && IsMoving)
        {
            IsMoving = false;
            StateHasChanged();
        }
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        IsMoving = true;
        lastMouseMove = DateTime.Now;
    }

    private void OnMouseEnter()
    {
        IsInPatArea = true;
    }    

    private void OnMouseLeave()
    {
        IsInPatArea = false;
    }    

    private void OnClick()
    {
        isMute = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (DotNetObjRef != null) DotNetObjRef.Dispose();
        if (timer != null) await timer.DisposeAsync();
    }
}