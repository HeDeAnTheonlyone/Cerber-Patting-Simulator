@page "/"
@using Services
@implements IAsyncDisposable

<PageTitle>Cerber Patting Simulator</PageTitle>

<head>
    <link rel="stylesheet" href="css/pat.css">
</head>

<div class="text-container" >
    <h1>Pat Cerber!</h1>
    <div class="status-text">
        <p>Cerber has been pat <span style="color:darkmagenta">@sumCounter</span> times.</p>

        @if (LocalCounter == LastSavedCount)
        {
            <p>Pat count is saved</p>
        }
        else
        {
            <p>Pat count saving...</p>
        }

        @if (isMute)
        {
            <p style="font-size: min(4vw, 2vh);" >Click once to unmute</p>
        }
    </div>
</div>

<div class="img-container" @onmousemove="OnMouseMove" @ontouchmove="OnMouseMove" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave" @onclick="OnClick" >
    <img class="cerber" draggable="false" src="@((IsMoving && IsInPatArea) || !isPatable ? "assets/image/dawg-smile.png" : "assets/image/dawg.png")" alt="Cerber" />

    @if ((IsMoving && IsInPatArea) || !isPatable)
    {
        <img class="patpat" draggable="false" src="assets/image/patpat.webp" alt="Patpat" />
    }
</div>



@code {
    [Inject] public required IJSRuntime JSRuntime { get; set; }
    private DotNetObjectReference<Pat>? DotNetObjRef { get; set; }

    private bool isMoving = false;
    private bool IsMoving
    {
        get => isMoving;
        set
        {
            isMoving = value;
            IsPatting = IsMoving && IsInPatArea;
        }
    }
    private bool isInPatArea = false;
    private bool IsInPatArea
    {
        get => isInPatArea;
        set
        {
            isInPatArea = value;
            IsPatting = IsInPatArea && IsMoving;
        }
    }
    private bool isPatting = false;
    private bool IsPatting
    {
        get => isPatting;
        set
        {
            if (isPatting == value) return;
            isPatting = value;
            if (value) PlayAudio();
            else StopAudio();
        }
    }
    private int sumCounter = 0;
    private int globalCounter = 0;
    private int localCounter = 0;
    private int LocalCounter
    {
        get => localCounter;
        set
        {
            localCounter = value;
            sumCounter = localCounter + globalCounter;
        }
    }
    private int pattingTicks = 0;
    private int PattingTicks
    {
        get => pattingTicks;
        set
        {
            pattingTicks = value;

            if (pattingTicks >= 5)
            {
                LocalCounter++;
                pattingTicks = 0;
                if (!isPatting) StateHasChanged();
            }
        }
    }
    private bool isPatable = true;
    private bool isMute = true;
    private int dataSaveTimeout = 0;
    private int lastSavedCount = 0;
    private int LastSavedCount
    {
        get => lastSavedCount;
        set
        {
            lastSavedCount = value;
            StateHasChanged();
        }
    }
    private Timer? timer;
    private DateTime lastMouseMove;
    private TimeSpan idleThreshold = TimeSpan.FromSeconds(0.1);



    protected override void OnInitialized()
    {
        dataSaveTimeout = 30;
        DotNetObjRef = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("window.setDotNetObjRef", DotNetObjRef);
        JSRuntime.InvokeVoidAsync("db.init", _FirebaseConfig.ConfigString);
        timer = new Timer(CheckIdleStatus, null, TimeSpan.FromSeconds(0), idleThreshold);
    }

    private async void SaveData()
    {
        if (dataSaveTimeout > 0 || LastSavedCount == LocalCounter) return;
        LastSavedCount = LocalCounter;
        dataSaveTimeout = 50;
        await JSRuntime.InvokeVoidAsync("db.updateData", LocalCounter);
    }

    [JSInvokable] public bool IsAllDataSaved() => LocalCounter == LastSavedCount;

    [JSInvokable] public int GetPattingCount() => LocalCounter;

    [JSInvokable] public void SetPattingCount(string globalCount, string localCount)
    {
        globalCounter = int.Parse(globalCount);
        LocalCounter = int.Parse(localCount);
        LastSavedCount = LocalCounter;
        StateHasChanged();
    }

    [JSInvokable] public void OnAudioEnded()
    {
        isPatable = true;
        StateHasChanged();
    }

    private async void InitAudio()
    {
        await JSRuntime.InvokeVoidAsync("audioPlayer.init");
        PlayAudio();
    }

    private async void PlayAudio()
    {
        if (!isPatable) return;

        if (!isMute)
        {
            await JSRuntime.InvokeVoidAsync("audioPlayer.play");
            isPatable = false;
        }
    }

    private async void StopAudio()
    {
        if (!isMute) await JSRuntime.InvokeVoidAsync("audioPlayer.setLoop", false);
    }

    private void CheckIdleStatus(object? state)
    {
        if (DateTime.Now.Subtract(lastMouseMove) >= idleThreshold && IsMoving)
        {
            IsMoving = false;
            StateHasChanged();
        }

        if (!IsPatting) SaveData();

        if ((IsMoving && IsInPatArea) || !isPatable) PattingTicks++;

        if (dataSaveTimeout > 0) dataSaveTimeout--;
    }

    private void OnMouseMove()
    {
        IsMoving = true;
        lastMouseMove = DateTime.Now;
    }

    private void OnMouseEnter() => IsInPatArea = true;

    private void OnMouseLeave() => IsInPatArea = false;

    private void OnClick()
    {
        if (!isMute) return;
        isMute = false;
        InitAudio();
    }

    public async ValueTask DisposeAsync()
    {
        if (DotNetObjRef != null) DotNetObjRef.Dispose();
        if (timer != null) await timer.DisposeAsync();
    }
}
